"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[520],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,g=d["".concat(m,".").concat(u)]||d[u]||p[u]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6926:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(5773),a=(n(7378),n(5318));const o={slug:"/git"},i="Git",l={unversionedId:"auto-generated/git",id:"auto-generated/git",title:"Git",description:"randGitBranch",source:"@site/docs/auto-generated/git.mdx",sourceDirName:"auto-generated",slug:"/git",permalink:"/falso/docs/git",draft:!1,editUrl:"https://github.com/ngneat/falso/blob/main/docs/updating-docs.md",tags:[],version:"current",frontMatter:{slug:"/git"},sidebar:"falso",previous:{title:"General",permalink:"/falso/docs/general"},next:{title:"Internet",permalink:"/falso/docs/internet"}},m={},s=[{value:"<code>randGitBranch</code>",id:"randgitbranch",level:3},{value:"<code>randGitCommitEntry</code>",id:"randgitcommitentry",level:3},{value:"<code>randGitCommitMessage</code>",id:"randgitcommitmessage",level:3},{value:"<code>randGitCommitSha</code>",id:"randgitcommitsha",level:3},{value:"<code>randGitShortSha</code>",id:"randgitshortsha",level:3}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git"},"Git"),(0,a.kt)("h3",{id:"randgitbranch"},(0,a.kt)("inlineCode",{parentName:"h3"},"randGitBranch")),(0,a.kt)("p",null,"Generate a random git branch."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { randGitBranch } from '@ngneat/falso';\n\nrandGitBranch()\nrandGitBranch({ length: 10 })\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Demo(props) {\n  return <Preview source={() => randGitBranch()} />;\n}\n")),(0,a.kt)("h3",{id:"randgitcommitentry"},(0,a.kt)("inlineCode",{parentName:"h3"},"randGitCommitEntry")),(0,a.kt)("p",null,"Generate a random git commit."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { randGitCommitEntry } from '@ngneat/falso';\n\nrandGitCommitEntry()\nrandGitCommitEntry({ length: 10 })\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Demo(props) {\n  return <Preview source={() => randGitCommitEntry()} />;\n}\n")),(0,a.kt)("h3",{id:"randgitcommitmessage"},(0,a.kt)("inlineCode",{parentName:"h3"},"randGitCommitMessage")),(0,a.kt)("p",null,"Generate a random git message."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { randGitCommitMessage } from '@ngneat/falso';\n\nrandGitCommitMessage()\nrandGitCommitMessage({ length: 10 })\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Demo(props) {\n  return <Preview source={() => randGitCommitMessage()} />;\n}\n")),(0,a.kt)("h3",{id:"randgitcommitsha"},(0,a.kt)("inlineCode",{parentName:"h3"},"randGitCommitSha")),(0,a.kt)("p",null,"Generate a random git sha."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { randGitCommitSha } from '@ngneat/falso';\n\nrandGitCommitSha()\nrandGitCommitSha({ length: 10 })\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Demo(props) {\n  return <Preview source={() => randGitCommitSha()} />;\n}\n")),(0,a.kt)("h3",{id:"randgitshortsha"},(0,a.kt)("inlineCode",{parentName:"h3"},"randGitShortSha")),(0,a.kt)("p",null,"Generate a random git short sha."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { randGitShortSha } from '@ngneat/falso';\n\nrandGitShortSha()\nrandGitShortSha({ length: 10 })\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function Demo(props) {\n  return <Preview source={() => randGitShortSha()} />;\n}\n")))}d.isMDXComponent=!0}}]);